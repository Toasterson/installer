{
  "system": {
    "hostname": "linux-server",
    "fqdn": "linux-server.example.com",
    "timezone": "UTC",
    "locale": "en_US.UTF-8",
    "environment": {
      "EDITOR": "vim",
      "PAGER": "less -R"
    }
  },
  "storage": {
    "pools": [
      {
        "name": "docker-pool",
        "pool_type": "lvm",
        "devices": ["/dev/sdb", "/dev/sdc"],
        "properties": {
          "stripe_size": "64",
          "allocation_policy": "anywhere"
        }
      }
    ],
    "filesystems": [
      {
        "device": "/dev/mapper/docker--pool-docker--data",
        "fstype": "ext4",
        "options": {
          "block_size": "4096",
          "inode_size": "256"
        },
        "format": true
      }
    ],
    "mounts": [
      {
        "source": "/dev/mapper/docker--pool-docker--data",
        "target": "/var/lib/docker",
        "fstype": "ext4",
        "options": ["defaults", "noatime"],
        "persistent": true
      },
      {
        "source": "tmpfs",
        "target": "/tmp",
        "fstype": "tmpfs",
        "options": ["size=4G", "mode=1777", "nodev", "nosuid"],
        "persistent": false
      }
    ]
  },
  "networking": {
    "interfaces": [
      {
        "name": "eth0",
        "addresses": [
          {
            "name": "static_v4",
            "kind": {
              "static": "192.168.1.200/24"
            }
          }
        ],
        "gateway": "192.168.1.1",
        "mtu": 1500,
        "description": "Primary network interface"
      }
    ],
    "nameservers": ["1.1.1.1", "8.8.8.8"],
    "search_domains": ["example.com"],
    "ntp_servers": ["pool.ntp.org", "time.cloudflare.com"]
  },
  "software": {
    "update_on_boot": false,
    "upgrade_on_boot": false,
    "packages_to_install": [
      "vim",
      "git",
      "htop",
      "curl",
      "wget",
      "docker.io",
      "docker-compose",
      "systemd-container"
    ],
    "repositories": {
      "apt": {
        "sources": [
          {
            "name": "docker",
            "uri": "https://download.docker.com/linux/ubuntu",
            "suites": ["focal"],
            "components": ["stable"],
            "key_id": "9DC858229FC7DD38854AE2D88D81803C0EBFCD88",
            "key_server": "keyserver.ubuntu.com"
          }
        ]
      }
    }
  },
  "users": [
    {
      "name": "admin",
      "description": "System Administrator",
      "shell": "/bin/bash",
      "groups": ["sudo", "docker", "systemd-journal"],
      "primary_group": "admin",
      "home_directory": "/home/admin",
      "uid": 1000,
      "create_home": true,
      "sudo": "unrestricted",
      "authentication": {
        "password": {
          "hash": "$6$rounds=4096$salt$hash...",
          "expire_on_first_login": false
        },
        "ssh_keys": [
          "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFoo... admin@workstation"
        ]
      }
    }
  ],
  "containers": {
    "containers": [
      {
        "name": "web-server",
        "image": "nginx:1.21-alpine",
        "runtime": "docker",
        "state": "running",
        "environment": {
          "NGINX_HOST": "web.example.com",
          "NGINX_PORT": "80"
        },
        "volumes": [
          {
            "source": "/data/web/html",
            "target": "/usr/share/nginx/html",
            "mount_type": "bind",
            "options": ["ro"]
          },
          {
            "source": "/data/web/config/nginx.conf",
            "target": "/etc/nginx/nginx.conf",
            "mount_type": "bind",
            "options": ["ro"]
          }
        ],
        "ports": [
          {
            "host_port": 80,
            "container_port": 80,
            "protocol": "tcp"
          },
          {
            "host_port": 443,
            "container_port": 443,
            "protocol": "tcp"
          }
        ],
        "networks": ["web-network"],
        "resources": {
          "cpu_limit": 1.0,
          "memory_limit": "512M",
          "memory_swap_limit": "1G"
        },
        "sysconfig": {
          "system": {
            "hostname": "web-container",
            "timezone": "UTC"
          },
          "scripts": {
            "main_scripts": [
              {
                "id": "setup_web_content",
                "content": "#!/bin/sh\necho '<h1>Welcome to Containerized Web Server</h1>' > /usr/share/nginx/html/index.html\necho 'Web content configured'",
                "interpreter": "/bin/sh",
                "run_once": true,
                "timeout": 60
              }
            ]
          }
        }
      },
      {
        "name": "database",
        "image": "postgres:13",
        "runtime": "docker",
        "state": "running",
        "environment": {
          "POSTGRES_DB": "appdb",
          "POSTGRES_USER": "appuser",
          "POSTGRES_PASSWORD": "secure_password_here",
          "PGDATA": "/var/lib/postgresql/data/pgdata"
        },
        "volumes": [
          {
            "source": "postgres-data",
            "target": "/var/lib/postgresql/data",
            "mount_type": "volume",
            "options": []
          },
          {
            "source": "/data/db/init",
            "target": "/docker-entrypoint-initdb.d",
            "mount_type": "bind",
            "options": ["ro"]
          }
        ],
        "ports": [
          {
            "host_port": 5432,
            "container_port": 5432,
            "protocol": "tcp",
            "host_ip": "127.0.0.1"
          }
        ],
        "networks": ["db-network"],
        "resources": {
          "cpu_limit": 2.0,
          "memory_limit": "2G",
          "memory_swap_limit": "4G"
        },
        "sysconfig": {
          "system": {
            "hostname": "db-container",
            "timezone": "UTC"
          },
          "scripts": {
            "main_scripts": [
              {
                "id": "setup_database",
                "content": "#!/bin/bash\n# Wait for PostgreSQL to be ready\nuntil pg_isready -h localhost -p 5432 -U $POSTGRES_USER; do\n  sleep 1\ndone\necho 'Database is ready'",
                "interpreter": "/bin/bash",
                "run_once": true,
                "timeout": 300
              }
            ]
          }
        }
      },
      {
        "name": "redis-cache",
        "image": "redis:6-alpine",
        "runtime": "docker",
        "state": "running",
        "environment": {},
        "volumes": [
          {
            "source": "redis-data",
            "target": "/data",
            "mount_type": "volume",
            "options": []
          },
          {
            "source": "/data/redis/redis.conf",
            "target": "/usr/local/etc/redis/redis.conf",
            "mount_type": "bind",
            "options": ["ro"]
          }
        ],
        "ports": [
          {
            "host_port": 6379,
            "container_port": 6379,
            "protocol": "tcp",
            "host_ip": "127.0.0.1"
          }
        ],
        "networks": ["cache-network"],
        "resources": {
          "cpu_limit": 0.5,
          "memory_limit": "256M"
        },
        "sysconfig": {
          "system": {
            "hostname": "cache-container",
            "timezone": "UTC"
          },
          "scripts": {
            "main_scripts": [
              {
                "id": "configure_redis",
                "content": "#!/bin/sh\necho 'Redis cache configured with persistence'",
                "interpreter": "/bin/sh",
                "run_once": true,
                "timeout": 60
              }
            ]
          }
        }
      },
      {
        "name": "monitoring",
        "image": "prom/prometheus:latest",
        "runtime": "docker",
        "state": "running",
        "environment": {},
        "volumes": [
          {
            "source": "/data/prometheus/prometheus.yml",
            "target": "/etc/prometheus/prometheus.yml",
            "mount_type": "bind",
            "options": ["ro"]
          },
          {
            "source": "prometheus-data",
            "target": "/prometheus",
            "mount_type": "volume",
            "options": []
          }
        ],
        "ports": [
          {
            "host_port": 9090,
            "container_port": 9090,
            "protocol": "tcp"
          }
        ],
        "networks": ["monitoring-network"],
        "resources": {
          "cpu_limit": 1.0,
          "memory_limit": "1G"
        },
        "sysconfig": {
          "system": {
            "hostname": "monitoring-container",
            "timezone": "UTC"
          },
          "scripts": {
            "main_scripts": [
              {
                "id": "setup_prometheus_config",
                "content": "#!/bin/sh\ncat > /etc/prometheus/prometheus.yml << 'EOF'\nglobal:\n  scrape_interval: 15s\nscrape_configs:\n  - job_name: 'prometheus'\n    static_configs:\n      - targets: ['localhost:9090']\n  - job_name: 'node-exporter'\n    static_configs:\n      - targets: ['192.168.1.200:9100']\n  - job_name: 'nginx'\n    static_configs:\n      - targets: ['web-server:80']\nEOF\necho 'Prometheus configuration updated'",
                "interpreter": "/bin/sh",
                "run_once": true,
                "timeout": 120
              }
            ]
          }
        }
      },
      {
        "name": "app-server",
        "image": "node:16-alpine",
        "runtime": "docker",
        "state": "running",
        "environment": {
          "NODE_ENV": "production",
          "DATABASE_URL": "postgresql://appuser:secure_password_here@database:5432/appdb",
          "REDIS_URL": "redis://redis-cache:6379",
          "PORT": "3000"
        },
        "volumes": [
          {
            "source": "/data/app/src",
            "target": "/app",
            "mount_type": "bind",
            "options": ["ro"]
          },
          {
            "source": "app-logs",
            "target": "/app/logs",
            "mount_type": "volume",
            "options": []
          }
        ],
        "ports": [
          {
            "host_port": 3000,
            "container_port": 3000,
            "protocol": "tcp"
          }
        ],
        "networks": ["app-network", "db-network", "cache-network"],
        "resources": {
          "cpu_limit": 1.5,
          "memory_limit": "1G"
        },
        "sysconfig": {
          "system": {
            "hostname": "app-container",
            "timezone": "UTC"
          },
          "software": {
            "packages_to_install": [
              "npm",
              "yarn"
            ]
          },
          "scripts": {
            "early_scripts": [
              {
                "id": "install_dependencies",
                "content": "#!/bin/sh\ncd /app\nnpm ci --only=production\necho 'Application dependencies installed'",
                "interpreter": "/bin/sh",
                "working_directory": "/app",
                "run_once": true,
                "timeout": 600
              }
            ],
            "main_scripts": [
              {
                "id": "start_application",
                "content": "#!/bin/sh\ncd /app\nnpm start &\necho $! > /var/run/app.pid\necho 'Application server started'",
                "interpreter": "/bin/sh",
                "working_directory": "/app",
                "run_once": true,
                "timeout": 120
              }
            ]
          }
        }
      },
      {
        "name": "backup-service",
        "image": "alpine:latest",
        "runtime": "docker",
        "state": "running",
        "environment": {
          "BACKUP_SCHEDULE": "0 2 * * *",
          "RETENTION_DAYS": "30"
        },
        "volumes": [
          {
            "source": "/data",
            "target": "/backup-source",
            "mount_type": "bind",
            "options": ["ro"]
          },
          {
            "source": "backup-storage",
            "target": "/backups",
            "mount_type": "volume",
            "options": []
          },
          {
            "source": "/data/backup/scripts",
            "target": "/scripts",
            "mount_type": "bind",
            "options": ["ro"]
          }
        ],
        "ports": [],
        "networks": ["backup-network"],
        "resources": {
          "cpu_limit": 0.5,
          "memory_limit": "512M"
        },
        "sysconfig": {
          "system": {
            "hostname": "backup-container",
            "timezone": "UTC"
          },
          "software": {
            "packages_to_install": [
              "rsync",
              "tar",
              "gzip",
              "cronie"
            ]
          },
          "scripts": {
            "main_scripts": [
              {
                "id": "setup_backup_cron",
                "content": "#!/bin/sh\necho '0 2 * * * /scripts/backup.sh' | crontab -\ncrond -f &\necho 'Backup service configured with daily schedule'",
                "interpreter": "/bin/sh",
                "run_once": true,
                "timeout": 60
              },
              {
                "id": "create_backup_script",
                "content": "#!/bin/sh\ncat > /scripts/backup.sh << 'EOF'\n#!/bin/sh\nDATE=$(date +%Y%m%d_%H%M%S)\ntar -czf /backups/backup_$DATE.tar.gz /backup-source\nfind /backups -name '*.tar.gz' -mtime +$RETENTION_DAYS -delete\necho \"Backup completed: backup_$DATE.tar.gz\"\nEOF\nchmod +x /scripts/backup.sh\necho 'Backup script created'",
                "interpreter": "/bin/sh",
                "run_once": true,
                "timeout": 60
              }
            ]
          }
        }
      }
    ]
  },
  "scripts": {
    "early_scripts": [
      {
        "id": "system_preparation",
        "content": "#!/bin/bash\necho 'Preparing Linux system for containers...'\n# Create data directories\nmkdir -p /data/{web/{html,config},db/init,redis,prometheus,app/{src,logs},backup/scripts}\n# Enable and start Docker\nsystemctl enable docker\nsystemctl start docker\n# Create Docker networks\ndocker network create web-network || true\ndocker network create db-network || true\ndocker network create cache-network || true\ndocker network create monitoring-network || true\ndocker network create app-network || true\ndocker network create backup-network || true\necho 'System preparation complete'",
        "interpreter": "/bin/bash",
        "run_once": true,
        "timeout": 300
      }
    ],
    "main_scripts": [
      {
        "id": "setup_docker_volumes",
        "content": "#!/bin/bash\n# Create Docker volumes\ndocker volume create postgres-data || true\ndocker volume create redis-data || true\ndocker volume create prometheus-data || true\ndocker volume create app-logs || true\ndocker volume create backup-storage || true\necho 'Docker volumes created'",
        "interpreter": "/bin/bash",
        "run_once": true,
        "timeout": 120
      },
      {
        "id": "configure_host_monitoring",
        "content": "#!/bin/bash\n# Install and configure node_exporter for host monitoring\nwget -q https://github.com/prometheus/node_exporter/releases/download/v1.3.1/node_exporter-1.3.1.linux-amd64.tar.gz\ntar xzf node_exporter-1.3.1.linux-amd64.tar.gz\nsudo cp node_exporter-1.3.1.linux-amd64/node_exporter /usr/local/bin/\ncat > /etc/systemd/system/node_exporter.service << 'EOF'\n[Unit]\nDescription=Node Exporter\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=nobody\nGroup=nobody\nType=simple\nExecStart=/usr/local/bin/node_exporter\n\n[Install]\nWantedBy=multi-user.target\nEOF\nsystemctl daemon-reload\nsystemctl enable node_exporter\nsystemctl start node_exporter\necho 'Host monitoring configured'",
        "interpreter": "/bin/bash",
        "run_once": true,
        "timeout": 300
      },
      {
        "id": "setup_container_configs",
        "content": "#!/bin/bash\n# Create configuration files for containers\ncat > /data/web/config/nginx.conf << 'EOF'\nevents {\n    worker_connections 1024;\n}\nhttp {\n    server {\n        listen 80;\n        server_name web.example.com;\n        location / {\n            root /usr/share/nginx/html;\n            index index.html;\n        }\n        location /api/ {\n            proxy_pass http://app-server:3000/;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n        }\n    }\n}\nEOF\n\ncat > /data/redis/redis.conf << 'EOF'\nsave 900 1\nsave 300 10\nsave 60 10000\nappendonly yes\nmaxmemory 200mb\nmaxmemory-policy allkeys-lru\nEOF\n\ncat > /data/db/init/init.sql << 'EOF'\nCREATE TABLE IF NOT EXISTS users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\nINSERT INTO users (username, email) VALUES ('admin', 'admin@example.com') ON CONFLICT DO NOTHING;\nEOF\n\necho 'Container configuration files created'",
        "interpreter": "/bin/bash",
        "run_once": true,
        "timeout": 120
      }
    ],
    "late_scripts": [
      {
        "id": "verify_container_stack",
        "content": "#!/bin/bash\necho 'Verifying container stack deployment...'\nsleep 30  # Wait for containers to be ready\n# Check container health\nfor container in web-server database redis-cache monitoring app-server backup-service; do\n    if docker ps --format 'table {{.Names}}\\t{{.Status}}' | grep -q $container; then\n        echo \"✓ $container is running\"\n    else\n        echo \"✗ $container is not running\"\n    fi\ndone\n# Test connectivity\ncurl -s http://localhost:80 > /dev/null && echo \"✓ Web server is responding\" || echo \"✗ Web server is not responding\"\ncurl -s http://localhost:9090 > /dev/null && echo \"✓ Prometheus is responding\" || echo \"✗ Prometheus is not responding\"\necho \"$(date): Linux container stack verification complete\" >> /var/log/provisioning.log\necho 'Container stack verification complete'",
        "interpreter": "/bin/bash",
        "run_once": true,
        "output_file": "/var/log/container-verification.log",
        "timeout": 300
      }
    ]
  },
  "power_state": {
    "mode": "noop",
    "delay": 0,
    "message": "Advanced Linux container server provisioning complete"
  }
}
